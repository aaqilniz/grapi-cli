diff --git a/node_modules/@loopback/rest-crud/dist/crud-rest.controller.js b/node_modules/@loopback/rest-crud/dist/crud-rest.controller.js
index 6952b2a..2e1c548 100644
--- a/node_modules/@loopback/rest-crud/dist/crud-rest.controller.js
+++ b/node_modules/@loopback/rest-crud/dist/crud-rest.controller.js
@@ -10,6 +10,8 @@ const repository_1 = require("@loopback/repository");
 const rest_1 = require("@loopback/rest");
 const assert_1 = tslib_1.__importDefault(require("assert"));
 const authentication_1 = require("@loopback/authentication");
+const authorization_1 = require("@loopback/authorization");
+
 /**
  * Create (define) a CRUD Controller class for the given model.
  *
@@ -57,6 +59,7 @@ function defineCrudRestController(modelCtor, options) {
     };
     tslib_1.__decorate([
         authenticatedMethod(options.auth ? options.auth.get : false),
+        authentorizationMethod(options.authorization, options.basePath, 'view-all'),
         (0, rest_1.get)('/', {
             ...response.array(200, `Array of ${modelName} instances`, modelCtor, {
                 includeRelations: true,
@@ -70,6 +73,7 @@ function defineCrudRestController(modelCtor, options) {
     ], ReadonlyRestControllerImpl.prototype, "find", null);
     tslib_1.__decorate([
         authenticatedMethod(options.auth ? options.auth.getById : false),
+        authentorizationMethod(options.authorization, options.basePath, 'view-single'),
         (0, rest_1.get)('/{id}', {
             ...response.model(200, `${modelName} instance`, modelCtor, {
                 includeRelations: true,
@@ -84,6 +88,7 @@ function defineCrudRestController(modelCtor, options) {
     ], ReadonlyRestControllerImpl.prototype, "findById", null);
     tslib_1.__decorate([
         authenticatedMethod(options.auth ? options.auth.count : false),
+        authentorizationMethod(options.authorization, options.basePath, 'view-count'),
         (0, rest_1.get)('/count', {
             ...response(200, `${modelName} count`, { schema: repository_1.CountSchema }),
         }),
@@ -128,6 +133,7 @@ function defineCrudRestController(modelCtor, options) {
     };
     tslib_1.__decorate([
         authenticatedMethod(options.auth ? options.auth.post : false),
+        authentorizationMethod(options.authorization, options.basePath, 'create'),
         (0, rest_1.post)('/', {
             ...response.model(200, `${modelName} instance created`, modelCtor),
         }),
@@ -141,6 +147,7 @@ function defineCrudRestController(modelCtor, options) {
     ], CrudRestControllerImpl.prototype, "create", null);
     tslib_1.__decorate([
         authenticatedMethod(options.auth ? options.auth.patch : false),
+        authentorizationMethod(options.authorization, options.basePath, 'update-all'),
         (0, rest_1.patch)('/', {
             ...response(200, `Count of ${modelName} models updated`, {
                 schema: repository_1.CountSchema,
@@ -154,6 +161,7 @@ function defineCrudRestController(modelCtor, options) {
     ], CrudRestControllerImpl.prototype, "updateAll", null);
     tslib_1.__decorate([
         authenticatedMethod(options.auth ? options.auth.patchById : false),
+        authentorizationMethod(options.authorization, options.basePath, 'update-single'),
         (0, rest_1.patch)('/{id}', {
             responses: {
                 '204': { description: `${modelName} was updated` },
@@ -167,6 +175,7 @@ function defineCrudRestController(modelCtor, options) {
     ], CrudRestControllerImpl.prototype, "updateById", null);
     tslib_1.__decorate([
         authenticatedMethod(options.auth ? options.auth.putById : false),
+        authentorizationMethod(options.authorization, options.basePath, 'replace-single'),
         (0, rest_1.put)('/{id}', {
             responses: {
                 '204': { description: `${modelName} was updated` },
@@ -180,6 +189,7 @@ function defineCrudRestController(modelCtor, options) {
     ], CrudRestControllerImpl.prototype, "replaceById", null);
     tslib_1.__decorate([
         authenticatedMethod(options.auth ? options.auth.deleteById : false),
+        authentorizationMethod(options.authorization, options.basePath, 'delete-single'),
         (0, rest_1.del)('/{id}', {
             responses: {
                 '204': { description: `${modelName} was deleted` },
@@ -253,4 +263,5 @@ function response(statusCode, description, payload) {
     response.array = array;
 })(response || (response = {}));
 function authenticatedMethod(applyAuth) { return applyAuth ? (0, authentication_1.authenticate)('jwt') : (target, key, descriptor) => { }; }
+function authentorizationMethod(applyAuthorization, resource, action) {return applyAuthorization ? (0, authorization_1.authorize)({ resource: resource, scopes: [action] }) : (target, key, descriptor) => { };}
 //# sourceMappingURL=crud-rest.controller.js.map
\ No newline at end of file
