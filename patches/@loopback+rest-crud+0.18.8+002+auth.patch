diff --git a/node_modules/@loopback/rest-crud/dist/crud-rest.controller.js b/node_modules/@loopback/rest-crud/dist/crud-rest.controller.js
index 78a9090..6952b2a 100644
--- a/node_modules/@loopback/rest-crud/dist/crud-rest.controller.js
+++ b/node_modules/@loopback/rest-crud/dist/crud-rest.controller.js
@@ -9,6 +9,7 @@ const tslib_1 = require("tslib");
 const repository_1 = require("@loopback/repository");
 const rest_1 = require("@loopback/rest");
 const assert_1 = tslib_1.__importDefault(require("assert"));
+const authentication_1 = require("@loopback/authentication");
 /**
  * Create (define) a CRUD Controller class for the given model.
  *
@@ -55,6 +56,7 @@ function defineCrudRestController(modelCtor, options) {
         }
     };
     tslib_1.__decorate([
+        authenticatedMethod(options.auth ? options.auth.get : false),
         (0, rest_1.get)('/', {
             ...response.array(200, `Array of ${modelName} instances`, modelCtor, {
                 includeRelations: true,
@@ -67,6 +69,7 @@ function defineCrudRestController(modelCtor, options) {
         tslib_1.__metadata("design:returntype", Promise)
     ], ReadonlyRestControllerImpl.prototype, "find", null);
     tslib_1.__decorate([
+        authenticatedMethod(options.auth ? options.auth.getById : false),
         (0, rest_1.get)('/{id}', {
             ...response.model(200, `${modelName} instance`, modelCtor, {
                 includeRelations: true,
@@ -80,6 +83,7 @@ function defineCrudRestController(modelCtor, options) {
         tslib_1.__metadata("design:returntype", Promise)
     ], ReadonlyRestControllerImpl.prototype, "findById", null);
     tslib_1.__decorate([
+        authenticatedMethod(options.auth ? options.auth.count : false),
         (0, rest_1.get)('/count', {
             ...response(200, `${modelName} count`, { schema: repository_1.CountSchema }),
         }),
@@ -123,6 +127,7 @@ function defineCrudRestController(modelCtor, options) {
         }
     };
     tslib_1.__decorate([
+        authenticatedMethod(options.auth ? options.auth.post : false),
         (0, rest_1.post)('/', {
             ...response.model(200, `${modelName} instance created`, modelCtor),
         }),
@@ -135,6 +140,7 @@ function defineCrudRestController(modelCtor, options) {
         tslib_1.__metadata("design:returntype", Promise)
     ], CrudRestControllerImpl.prototype, "create", null);
     tslib_1.__decorate([
+        authenticatedMethod(options.auth ? options.auth.patch : false),
         (0, rest_1.patch)('/', {
             ...response(200, `Count of ${modelName} models updated`, {
                 schema: repository_1.CountSchema,
@@ -147,6 +153,7 @@ function defineCrudRestController(modelCtor, options) {
         tslib_1.__metadata("design:returntype", Promise)
     ], CrudRestControllerImpl.prototype, "updateAll", null);
     tslib_1.__decorate([
+        authenticatedMethod(options.auth ? options.auth.patchById : false),
         (0, rest_1.patch)('/{id}', {
             responses: {
                 '204': { description: `${modelName} was updated` },
@@ -159,6 +166,7 @@ function defineCrudRestController(modelCtor, options) {
         tslib_1.__metadata("design:returntype", Promise)
     ], CrudRestControllerImpl.prototype, "updateById", null);
     tslib_1.__decorate([
+        authenticatedMethod(options.auth ? options.auth.putById : false),
         (0, rest_1.put)('/{id}', {
             responses: {
                 '204': { description: `${modelName} was updated` },
@@ -171,6 +179,7 @@ function defineCrudRestController(modelCtor, options) {
         tslib_1.__metadata("design:returntype", Promise)
     ], CrudRestControllerImpl.prototype, "replaceById", null);
     tslib_1.__decorate([
+        authenticatedMethod(options.auth ? options.auth.deleteById : false),
         (0, rest_1.del)('/{id}', {
             responses: {
                 '204': { description: `${modelName} was deleted` },
@@ -243,4 +252,5 @@ function response(statusCode, description, payload) {
     }
     response.array = array;
 })(response || (response = {}));
+function authenticatedMethod(applyAuth) { return applyAuth ? (0, authentication_1.authenticate)('jwt') : (target, key, descriptor) => { }; }
 //# sourceMappingURL=crud-rest.controller.js.map
\ No newline at end of file
